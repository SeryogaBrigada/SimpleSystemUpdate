#!/bin/bash -e

##**************************************************************************
## Copyright (C) 2023-2025 Sergey Kovalenko <seryoga.engineering@gmail.com>
## SPDX-License-Identifier: MIT
##**************************************************************************
VERSION=1.0.10

function display_help () {
    echo "Usage: $0 [OPTION]" >&2
    echo "Available options:"
    echo "    -h, --help            display help and exit"
    echo "    -v, --version         display version"
    echo
    echo "This tool serves as One-click update button for Linux users."
    echo "It performs the following actions:"
    echo "- updates mirrorlist (Arch Linux)"
    echo "- checks for updates"
    echo "- performs update"
    echo "- removes invalid/unsupported packages"
    echo "- updates makepkg configuration files"
    echo "Note: ipinfo.io service is used to determine the country code for mirrorlist request."
    exit
}

function display_version () {
    echo "Simple System Update version $VERSION"
    echo "Copyright (C) 2023-2025 Sergey Kovalenko <seryoga.engineering@gmail.com>"
    echo "This is free software under MIT license."
    echo "In case of issue please report to <https://github.com/SeryogaBrigada/SimpleSystemUpdate/issues>"
    exit
}

# Process arguments
while :
do
    case "$1" in
        -h | --help)
            display_help
            exit 0
            ;;
        -v | --version)
            display_version
            exit 0
            ;;
        -*)
            echo "Error: Unknown option: $1" >&2
            display_help
            exit 1
            ;;
        *)  # No options
            break
            ;;
    esac
done

# Update Flatpak
if which flatpak >/dev/null 2>&1; then
    flatpak update --noninteractive
fi

# Update Snap
if which snap >/dev/null 2>&1; then
    sudo snap refresh
fi

# Ubuntu/Debian
if which apt >/dev/null 2>&1; then
    sudo apt update
    sudo apt dist-upgrade -y
    sudo apt autoremove --purge -y
    sudo apt clean
    exit
fi

# Arch Linux
function get_country_code () {
    # Fallback country code if the ipinfo.io service is unavailable
    local COUNTRY=US

    # Get the ISP country from ipinfo.io service
    local FOUND_COUNTRY=$(curl -s ipinfo.io | jq -r '.country')

    if [ ! -z $FOUND_COUNTRY ]; then
        COUNTRY=$FOUND_COUNTRY
    fi

    echo $COUNTRY
}

if which pacman >/dev/null 2>&1; then
    if [[ -f /etc/pacman.d/mirrorlist ]]; then
        if grep -q archlinux /etc/pacman.d/mirrorlist; then
            # Remove the .pacnew file since the mirrorlist will be updated on the next stage
            [[ -f /etc/pacman.d/mirrorlist.pacnew ]] && sudo rm /etc/pacman.d/mirrorlist.pacnew;

            # Update mirrorlist for current country
            SERVER_COUNTRY=$(get_country_code)
            echo "Updating mirrorlist for $SERVER_COUNTRY:"
            curl -s "https://archlinux.org/mirrorlist/?country=${SERVER_COUNTRY}&protocol=https&use_mirror_status=on" \
                | sed -e 's/^#Server/Server/' -e '/^#/d' \
                | rankmirrors -n 5 - \
                | sudo tee /etc/pacman.d/mirrorlist.tmp
            # Check correctness
            if grep -q archlinux /etc/pacman.d/mirrorlist.tmp; then
                sudo mv /etc/pacman.d/mirrorlist.tmp /etc/pacman.d/mirrorlist
                echo " - mirrorlist updated."
            else
                echo " - update failed!"
                [[ -f /etc/pacman.d/mirrorlist.tmp ]] && sudo rm /etc/pacman.d/mirrorlist.tmp;
            fi
        elif grep -q manjaro /etc/pacman.d/mirrorlist; then
            # Update mirrorlist for Manjaro
            sudo pacman-mirrors --fasttrack 5
        fi
    fi

    # Update EndeavourOS mirrorlist if the new one is present
    if [[ -f /etc/pacman.d/endeavouros-mirrorlist.pacnew ]] then
        echo "Updating endeavouros-mirrorlist"
        sudo mv /etc/pacman.d/endeavouros-mirrorlist.pacnew /etc/pacman.d/endeavouros-mirrorlist
    fi

    # Update pacman.conf if the new one is present
    if [[ -f /etc/pacman.conf.pacnew ]]; then
        echo "Updating pacman.conf from pacman.conf.pacnew:"
        # If multilib repository is enabled in the original pacman.conf, enable it in the new one
        if ! grep -q -F "#[multilib]" /etc/pacman.conf; then
            if grep -q -F "#[multilib]" /etc/pacman.conf.pacnew; then
                echo " - re-enabling [multilib] repository"
                sudo sed -z -i 's|#\[multilib\]\n\#Include = /etc/pacman.d/mirrorlist|\[multilib\]\nInclude = /etc/pacman.d/mirrorlist|' /etc/pacman.conf.pacnew
            fi
        fi

        # If color mode is enabled in the original pacman.conf, enable it in the new one
        if ! grep -q -F "#Color" /etc/pacman.conf; then
            if grep -q -F "#Color" /etc/pacman.conf.pacnew; then
                echo " - re-enabling color mode"
                sudo sed -z -i 's|#Color|Color\nILoveCandy|' /etc/pacman.conf.pacnew
            fi
        fi

        # If EndeavourOS repository is enabled in the original pacman.conf, enable it in the new one
        if grep -q -F "[endeavouros]" /etc/pacman.conf; then
            if ! grep -q -F "[endeavouros]" /etc/pacman.conf.pacnew; then
                echo " - adding EndeavourOS repository"
                cat << 'EOF' | sudo tee -a /etc/pacman.conf.pacnew

[endeavouros]
SigLevel = PackageRequired
Include = /etc/pacman.d/endeavouros-mirrorlist
EOF
            fi
        fi

        sudo mv /etc/pacman.conf.pacnew /etc/pacman.conf
    fi

    # Update makepkg.conf if the new one is present
    if [[ -f /etc/makepkg.conf.pacnew ]]; then
        echo "Updating makepkg.conf"
        # Apply optimal parameters
        sudo sed -i 's|-march=x86-64 -mtune=generic|-march=native -mtune=native|g' /etc/makepkg.conf.pacnew
        sudo sed -i 's|#MAKEFLAGS="-j2"|MAKEFLAGS="-j$(nproc)"|g' /etc/makepkg.conf.pacnew
        sudo sed -i "s|PKGEXT='.pkg.tar.xz'|PKGEXT='.pkg.tar.zst'|g" /etc/makepkg.conf.pacnew
        sudo sed -i "s|SRCEXT='.src.tar.gz'|SRCEXT='.src.tar.zst'|g" /etc/makepkg.conf.pacnew
        sudo mv /etc/makepkg.conf.pacnew /etc/makepkg.conf
    fi

    # Update rust.conf if the new one is present
    if [[ -f /etc/makepkg.conf.d/rust.conf.pacnew ]]; then
        echo "Updating makepkg rust.conf"
        sudo mv /etc/makepkg.conf.d/rust.conf.pacnew /etc/makepkg.conf.d/rust.conf
    fi

    # Update fortran.conf if the new one is present
    if [[ -f /etc/makepkg.conf.d/fortran.conf.pacnew ]]; then
        echo "Updating makepkg fortran.conf"
        sudo mv /etc/makepkg.conf.d/fortran.conf.pacnew /etc/makepkg.conf.d/fortran.conf
    fi

    # Update system packages first
    sudo pacman -Syyu --noconfirm

    # Check yay is installed and works correctly
    if yay --version >/dev/null 2>&1; then
        yay -Syu --noconfirm --removemake --editmenu=false --diffmenu=false --cleanmenu=false
        yay -Yc --noconfirm
    fi

    exit
fi

echo "Unsupported package manager"
exit 1
